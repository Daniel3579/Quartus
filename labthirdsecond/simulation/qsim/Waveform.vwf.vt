// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2022 22:31:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    labthirdsecond
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module labthirdsecond_vlg_sample_tst(
	A,
	A1,
	B,
	B1,
	K,
	Z,
	sampler_tx
);
input  A;
input  A1;
input  B;
input  B1;
input  K;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(A or A1 or B or B1 or K or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module labthirdsecond_vlg_check_tst (
	P,
	S1,
	S2,
	sampler_rx
);
input  P;
input  S1;
input  S2;
input sampler_rx;

reg  P_expected;
reg  S1_expected;
reg  S2_expected;

reg  P_prev;
reg  S1_prev;
reg  S2_prev;

reg  P_expected_prev;
reg  S1_expected_prev;
reg  S2_expected_prev;

reg  last_P_exp;
reg  last_S1_exp;
reg  last_S2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	P_prev = P;
	S1_prev = S1;
	S2_prev = S2;
end

// update expected /o prevs

always @(trigger)
begin
	P_expected_prev = P_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
end



// expected P
initial
begin
	P_expected = 1'bX;
end 

// expected S2
initial
begin
	S2_expected = 1'bX;
end 

// expected S1
initial
begin
	S1_expected = 1'bX;
end 
// generate trigger
always @(P_expected or P or S1_expected or S1 or S2_expected or S2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected P = %b | expected S1 = %b | expected S2 = %b | ",P_expected_prev,S1_expected_prev,S2_expected_prev);
	$display("| real P = %b | real S1 = %b | real S2 = %b | ",P_prev,S1_prev,S2_prev);
`endif
	if (
		( P_expected_prev !== 1'bx ) && ( P_prev !== P_expected_prev )
		&& ((P_expected_prev !== last_P_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_P_exp = P_expected_prev;
	end
	if (
		( S1_expected_prev !== 1'bx ) && ( S1_prev !== S1_expected_prev )
		&& ((S1_expected_prev !== last_S1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S1_exp = S1_expected_prev;
	end
	if (
		( S2_expected_prev !== 1'bx ) && ( S2_prev !== S2_expected_prev )
		&& ((S2_expected_prev !== last_S2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S2_exp = S2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module labthirdsecond_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg A1;
reg B;
reg B1;
reg K;
reg Z;
// wires                                               
wire P;
wire S1;
wire S2;

wire sampler;                             

// assign statements (if any)                          
labthirdsecond i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A1(A1),
	.B(B),
	.B1(B1),
	.K(K),
	.P(P),
	.S1(S1),
	.S2(S2),
	.Z(Z)
);

// A1
initial
begin
	repeat(8)
	begin
		A1 = 1'b0;
		A1 = #60000 1'b1;
		# 60000;
	end
	A1 = 1'b0;
end 

// A
initial
begin
	repeat(16)
	begin
		A = 1'b0;
		A = #30000 1'b1;
		# 30000;
	end
	A = 1'b0;
	A = #30000 1'b1;
end 

// B1
initial
begin
	repeat(2)
	begin
		B1 = 1'b0;
		B1 = #240000 1'b1;
		# 240000;
	end
	B1 = 1'b0;
end 

// B
initial
begin
	repeat(4)
	begin
		B = 1'b0;
		B = #120000 1'b1;
		# 120000;
	end
	B = 1'b0;
end 

// K
initial
begin
	K = 1'b0;
	K = #480000 1'b1;
	K = #480000 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
end 

labthirdsecond_vlg_sample_tst tb_sample (
	.A(A),
	.A1(A1),
	.B(B),
	.B1(B1),
	.K(K),
	.Z(Z),
	.sampler_tx(sampler)
);

labthirdsecond_vlg_check_tst tb_out(
	.P(P),
	.S1(S1),
	.S2(S2),
	.sampler_rx(sampler)
);
endmodule

